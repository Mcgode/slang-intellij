// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Slang.flex

package slang.plugin.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.tree.TokenSet;
import java.util.ArrayList;
import java.util.List;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static slang.plugin.psi.SlangTypes.*;


public class SlangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_COMMAND_STATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\2\0"+
    "\1\5\1\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\2\22"+
    "\1\23\1\22\1\24\1\22\1\25\1\22\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\0\4\34\1\35\1\36"+
    "\5\37\1\40\10\37\1\41\2\37\1\42\2\37\1\43"+
    "\1\44\1\45\1\46\1\47\1\0\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\37\1\56\1\57\2\37\1\60"+
    "\1\61\1\62\1\63\1\64\1\37\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\37\1\75\1\76"+
    "\1\77\7\0\1\3\32\0\1\1\u01bf\0\12\22\206\0"+
    "\12\22\306\0\12\22\234\0\12\22\166\0\12\22\140\0"+
    "\12\22\166\0\12\22\106\0\12\22\u0116\0\12\22\106\0"+
    "\12\22\346\0\1\1\u015f\0\12\22\46\0\12\22\u012c\0"+
    "\12\22\200\0\12\22\246\0\12\22\6\0\12\22\266\0"+
    "\12\22\126\0\12\22\206\0\12\22\6\0\12\22\246\0"+
    "\13\1\35\0\2\3\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\u01cf\0\12\22\46\0\12\22\306\0\12\22\26\0"+
    "\12\22\126\0\12\22\u0196\0\12\22\6\0\u0100\100\240\0"+
    "\12\22\206\0\12\22\u012c\0\12\22\200\0\12\22\74\0"+
    "\12\22\220\0\12\22\166\0\12\22\146\0\12\22\206\0"+
    "\12\22\106\0\12\22\266\0\12\22\u0164\0\62\22\100\0"+
    "\12\22\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\2\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\1\1\23"+
    "\1\1\17\21\1\24\1\1\1\25\3\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\0\1\41\1\0\1\42\3\0\1\2\1\43\13\21"+
    "\1\44\11\21\1\45\1\46\1\35\3\0\1\35\1\13"+
    "\1\47\1\50\14\21\1\51\2\21\1\52\6\21\1\53"+
    "\1\54\3\21\1\55\1\56\1\21\1\57\2\21\1\60"+
    "\10\21\1\61\1\62\1\63\1\21\1\64\1\65\2\21"+
    "\1\66\14\21\1\67\1\70\1\71\3\21\1\72\4\21"+
    "\1\73\4\21\1\74\1\75\2\21\1\76\3\21\1\77"+
    "\1\100\3\21\1\101\1\102\1\103\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\202"+
    "\0\202\0\u01c7\0\u0208\0\202\0\u0249\0\u028a\0\u02cb\0\u030c"+
    "\0\u034d\0\u038e\0\202\0\u03cf\0\202\0\u0410\0\u0451\0\202"+
    "\0\u0492\0\202\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618"+
    "\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820"+
    "\0\u0861\0\u08a2\0\202\0\u08e3\0\202\0\u0924\0\202\0\u0965"+
    "\0\202\0\202\0\202\0\202\0\202\0\202\0\u09a6\0\202"+
    "\0\u09e7\0\202\0\u0a28\0\202\0\u0a69\0\202\0\u0aaa\0\u0aeb"+
    "\0\u0492\0\u0492\0\202\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\202\0\202\0\202\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\202\0\202\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u0451\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da"+
    "\0\202\0\u0451\0\u171b\0\u175c\0\u179d\0\u0451\0\u0451\0\u17de"+
    "\0\u0451\0\u181f\0\u1860\0\u0451\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u0451\0\u1aa9\0\u0451\0\u1aea"+
    "\0\u0451\0\u0451\0\u1b2b\0\u1b6c\0\u0451\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u0451\0\u0451\0\u0451\0\u1eb9\0\u1efa\0\u1f3b\0\u0451"+
    "\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u0451\0\u2080\0\u20c1\0\u2102"+
    "\0\u2143\0\u0451\0\u0451\0\u2184\0\u21c5\0\u0451\0\u2206\0\u2247"+
    "\0\u2288\0\u0451\0\u0451\0\u22c9\0\u230a\0\u234b\0\u0451\0\u0451"+
    "\0\u0451\0\u0451\0\u0451";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\5\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\3\7\27\1\30\1\31"+
    "\1\32\1\33\2\27\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\2\27\1\43\1\44\1\45\1\27\1\46"+
    "\1\47\1\50\1\51\1\52\2\27\1\53\1\54\1\55"+
    "\1\3\2\56\1\57\7\56\1\60\66\56\102\0\4\4"+
    "\127\0\1\61\76\0\1\62\100\0\1\63\100\0\1\64"+
    "\100\0\1\65\100\0\1\66\67\0\6\67\65\0\1\70"+
    "\4\0\1\71\11\0\1\72\65\0\1\67\1\0\6\21"+
    "\7\0\1\73\3\0\1\74\1\75\11\0\1\73\13\0"+
    "\1\74\2\0\1\75\23\0\1\67\1\0\6\21\7\0"+
    "\1\73\3\0\1\74\12\0\1\73\13\0\1\74\36\0"+
    "\1\76\102\0\1\77\102\0\1\100\66\0\6\27\6\0"+
    "\7\27\4\0\26\27\5\0\1\101\1\102\1\101\1\102"+
    "\125\0\1\103\67\0\6\27\6\0\7\27\4\0\14\27"+
    "\1\104\11\27\24\0\6\27\6\0\7\27\4\0\11\27"+
    "\1\105\2\27\1\106\11\27\24\0\6\27\6\0\7\27"+
    "\4\0\14\27\1\107\11\27\24\0\6\27\6\0\7\27"+
    "\4\0\1\27\1\110\11\27\1\111\10\27\1\112\1\27"+
    "\24\0\6\27\6\0\7\27\4\0\1\27\1\113\7\27"+
    "\1\114\7\27\1\115\4\27\24\0\6\27\6\0\7\27"+
    "\4\0\1\27\1\116\24\27\24\0\6\27\6\0\7\27"+
    "\4\0\13\27\1\117\12\27\24\0\6\27\6\0\7\27"+
    "\4\0\1\27\1\120\12\27\1\121\11\27\24\0\6\27"+
    "\6\0\7\27\4\0\21\27\1\122\4\27\24\0\6\27"+
    "\6\0\7\27\4\0\16\27\1\123\7\27\24\0\6\27"+
    "\6\0\7\27\4\0\20\27\1\124\5\27\24\0\6\27"+
    "\6\0\7\27\4\0\16\27\1\125\7\27\24\0\6\27"+
    "\6\0\7\27\4\0\10\27\1\126\15\27\24\0\6\27"+
    "\6\0\7\27\4\0\14\27\1\127\11\27\24\0\6\27"+
    "\6\0\7\27\4\0\7\27\1\130\16\27\35\0\1\131"+
    "\47\0\2\56\1\0\7\56\1\0\66\56\17\0\1\132"+
    "\101\0\6\67\7\0\1\73\1\133\1\0\1\134\13\0"+
    "\1\73\1\133\2\0\1\135\20\0\2\71\3\0\73\71"+
    "\14\0\1\136\1\0\1\136\2\0\6\137\73\0\6\140"+
    "\6\0\3\140\11\0\6\140\54\0\1\141\100\0\1\142"+
    "\67\0\6\27\6\0\7\27\4\0\14\27\1\143\11\27"+
    "\24\0\6\27\6\0\7\27\4\0\1\27\1\144\24\27"+
    "\24\0\6\27\6\0\7\27\4\0\13\27\1\145\12\27"+
    "\24\0\6\27\6\0\7\27\4\0\21\27\1\146\4\27"+
    "\24\0\6\27\6\0\7\27\4\0\3\27\1\147\22\27"+
    "\24\0\6\27\6\0\7\27\4\0\21\27\1\150\4\27"+
    "\24\0\6\27\6\0\7\27\4\0\15\27\1\151\10\27"+
    "\24\0\6\27\6\0\7\27\4\0\11\27\1\152\14\27"+
    "\24\0\6\27\6\0\7\27\4\0\1\27\1\153\12\27"+
    "\1\154\11\27\24\0\6\27\6\0\7\27\4\0\13\27"+
    "\1\155\12\27\24\0\6\27\6\0\7\27\4\0\11\27"+
    "\1\156\14\27\24\0\6\27\6\0\7\27\4\0\20\27"+
    "\1\157\5\27\24\0\6\27\6\0\7\27\4\0\12\27"+
    "\1\160\13\27\24\0\6\27\6\0\7\27\4\0\1\161"+
    "\25\27\24\0\6\27\6\0\7\27\4\0\20\27\1\162"+
    "\5\27\24\0\6\27\6\0\7\27\4\0\5\27\1\163"+
    "\20\27\24\0\6\27\6\0\7\27\4\0\16\27\1\164"+
    "\7\27\24\0\6\27\6\0\7\27\4\0\21\27\1\165"+
    "\4\27\24\0\6\27\6\0\7\27\4\0\13\27\1\166"+
    "\12\27\24\0\6\27\6\0\7\27\4\0\10\27\1\167"+
    "\15\27\24\0\6\27\6\0\7\27\4\0\5\27\1\170"+
    "\20\27\42\0\1\171\117\0\1\171\43\0\6\137\73\0"+
    "\6\137\10\0\1\133\1\0\1\134\14\0\1\133\2\0"+
    "\1\135\40\0\6\140\6\0\3\140\2\0\1\74\6\0"+
    "\6\140\12\0\1\74\30\0\6\27\6\0\7\27\4\0"+
    "\11\27\1\172\14\27\24\0\6\27\6\0\7\27\4\0"+
    "\17\27\1\173\6\27\24\0\6\27\6\0\7\27\4\0"+
    "\17\27\1\174\6\27\24\0\6\27\6\0\7\27\4\0"+
    "\2\27\1\175\23\27\24\0\6\27\6\0\7\27\4\0"+
    "\7\27\1\176\16\27\24\0\6\27\6\0\7\27\4\0"+
    "\12\27\1\177\13\27\24\0\6\27\6\0\7\27\4\0"+
    "\1\27\1\200\24\27\24\0\6\27\6\0\7\27\4\0"+
    "\17\27\1\165\6\27\24\0\6\27\6\0\7\27\4\0"+
    "\20\27\1\201\5\27\24\0\6\27\6\0\7\27\4\0"+
    "\1\27\1\202\24\27\24\0\6\27\6\0\7\27\4\0"+
    "\3\27\1\203\22\27\24\0\6\27\6\0\7\27\4\0"+
    "\6\27\1\204\17\27\24\0\1\27\1\205\2\27\1\206"+
    "\1\207\6\0\7\27\4\0\5\27\1\210\20\27\24\0"+
    "\6\27\6\0\7\27\4\0\5\27\1\211\20\27\24\0"+
    "\6\27\6\0\7\27\4\0\4\27\1\212\21\27\24\0"+
    "\6\27\6\0\7\27\4\0\3\27\1\213\22\27\24\0"+
    "\6\27\6\0\7\27\4\0\21\27\1\214\4\27\24\0"+
    "\6\27\6\0\7\27\4\0\5\27\1\215\20\27\24\0"+
    "\6\27\6\0\7\27\4\0\20\27\1\216\5\27\24\0"+
    "\6\27\6\0\7\27\4\0\4\27\1\217\21\27\24\0"+
    "\6\27\6\0\7\27\4\0\16\27\1\220\7\27\24\0"+
    "\6\27\6\0\7\27\4\0\17\27\1\221\6\27\24\0"+
    "\6\27\6\0\7\27\4\0\20\27\1\222\5\27\24\0"+
    "\6\27\6\0\7\27\4\0\11\27\1\223\14\27\24\0"+
    "\6\27\6\0\7\27\4\0\13\27\1\224\12\27\24\0"+
    "\6\27\6\0\7\27\4\0\20\27\1\225\5\27\24\0"+
    "\6\27\6\0\7\27\4\0\20\27\1\226\5\27\24\0"+
    "\4\27\1\227\1\27\6\0\7\27\4\0\26\27\24\0"+
    "\3\27\1\230\2\27\6\0\7\27\4\0\26\27\24\0"+
    "\6\27\6\0\7\27\4\0\1\231\25\27\24\0\6\27"+
    "\6\0\7\27\4\0\16\27\1\232\7\27\24\0\6\27"+
    "\6\0\7\27\4\0\17\27\1\233\6\27\24\0\6\27"+
    "\6\0\7\27\4\0\10\27\1\234\15\27\24\0\6\27"+
    "\6\0\7\27\4\0\10\27\1\235\15\27\24\0\6\27"+
    "\6\0\7\27\4\0\3\27\1\236\22\27\24\0\1\27"+
    "\1\237\2\27\1\240\1\241\6\0\7\27\4\0\26\27"+
    "\24\0\6\27\6\0\7\27\4\0\5\27\1\242\20\27"+
    "\24\0\6\27\6\0\7\27\4\0\5\27\1\243\20\27"+
    "\24\0\6\27\6\0\7\27\4\0\4\27\1\244\21\27"+
    "\24\0\6\27\6\0\7\27\4\0\25\27\1\245\24\0"+
    "\6\27\6\0\7\27\4\0\1\246\25\27\24\0\6\27"+
    "\6\0\7\27\4\0\1\247\25\27\24\0\6\27\6\0"+
    "\7\27\4\0\20\27\1\250\5\27\24\0\6\27\6\0"+
    "\7\27\4\0\6\27\1\251\17\27\24\0\6\27\6\0"+
    "\7\27\4\0\15\27\1\252\10\27\24\0\6\27\6\0"+
    "\7\27\4\0\6\27\1\253\17\27\24\0\6\27\6\0"+
    "\7\27\4\0\17\27\1\254\6\27\24\0\6\27\6\0"+
    "\7\27\4\0\20\27\1\255\5\27\24\0\4\27\1\256"+
    "\1\27\6\0\7\27\4\0\26\27\24\0\3\27\1\257"+
    "\2\27\6\0\7\27\4\0\26\27\24\0\6\27\6\0"+
    "\7\27\4\0\1\260\25\27\24\0\6\27\6\0\7\27"+
    "\4\0\15\27\1\261\10\27\24\0\6\27\6\0\7\27"+
    "\4\0\20\27\1\262\5\27\24\0\6\27\6\0\7\27"+
    "\4\0\20\27\1\263\5\27\24\0\6\27\6\0\7\27"+
    "\4\0\1\27\1\264\24\27\24\0\6\27\6\0\7\27"+
    "\4\0\1\27\1\265\24\27\24\0\6\27\6\0\7\27"+
    "\4\0\6\27\1\266\17\27\24\0\6\27\6\0\7\27"+
    "\4\0\10\27\1\267\15\27\24\0\6\27\6\0\7\27"+
    "\4\0\1\270\25\27\24\0\6\27\6\0\7\27\4\0"+
    "\1\271\25\27\24\0\6\27\6\0\7\27\4\0\20\27"+
    "\1\272\5\27\24\0\6\27\6\0\7\27\4\0\5\27"+
    "\1\273\20\27\24\0\6\27\6\0\7\27\4\0\3\27"+
    "\1\274\22\27\24\0\6\27\6\0\7\27\4\0\3\27"+
    "\1\275\22\27\24\0\6\27\6\0\7\27\4\0\14\27"+
    "\1\276\11\27\24\0\6\27\6\0\7\27\4\0\20\27"+
    "\1\277\5\27\24\0\6\27\6\0\7\27\4\0\20\27"+
    "\1\300\5\27\24\0\6\27\6\0\7\27\4\0\5\27"+
    "\1\301\20\27\24\0\6\27\6\0\7\27\4\0\5\27"+
    "\1\302\20\27\24\0\6\27\6\0\7\27\4\0\13\27"+
    "\1\303\12\27\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9100];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\2\11\2\1\1\11\6\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\20\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\6\11\1\1\1\11"+
    "\1\1\1\11\1\0\1\11\1\0\1\11\3\0\1\1"+
    "\1\11\25\1\3\11\3\0\2\1\2\11\26\1\1\11"+
    "\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public boolean afterStorageType = false;
    public boolean afterType = false;
    public List<String> userDefinedTypes = new ArrayList<>();
    public SlangLexer() {
      this((java.io.Reader)null);
    }

    private IElementType DebugPrint(IElementType elementType)
    {
        System.out.println("Tokenized '%s' to '%s', with state %s afterType=%b afterStruct=%b".formatted(
                yytext().toString(),
                elementType.getDebugName(),
                yystate(),
                afterType,
                afterStorageType));
        return elementType;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 70: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 71: break;
          case 3:
            { return MOD_OP;
            }
          // fall through
          case 72: break;
          case 4:
            { afterType = false; return LEFT_PAREN;
            }
          // fall through
          case 73: break;
          case 5:
            { afterType = false; return RIGHT_PAREN;
            }
          // fall through
          case 74: break;
          case 6:
            { return MUL_OP;
            }
          // fall through
          case 75: break;
          case 7:
            { return ADD_OP;
            }
          // fall through
          case 76: break;
          case 8:
            { afterType = false; return COMMA;
            }
          // fall through
          case 77: break;
          case 9:
            { return SUB_OP;
            }
          // fall through
          case 78: break;
          case 10:
            { return DIV_OP;
            }
          // fall through
          case 79: break;
          case 11:
            { return INT_LITERAL;
            }
          // fall through
          case 80: break;
          case 12:
            { afterType = false; return COLON;
            }
          // fall through
          case 81: break;
          case 13:
            { afterType = false; return SEMICOLON;
            }
          // fall through
          case 82: break;
          case 14:
            { return LESS_OP;
            }
          // fall through
          case 83: break;
          case 15:
            { afterType = false; return ASSIGN;
            }
          // fall through
          case 84: break;
          case 16:
            { return GREATER_OP;
            }
          // fall through
          case 85: break;
          case 17:
            { if (!afterType && !afterStorageType && userDefinedTypes.contains(yytext().toString()))
                {
                    afterType = true;
                    //return USER_TYPE_NAME;
                }
                else if (afterStorageType)
                {
                    afterStorageType = false;
                    userDefinedTypes.add(yytext().toString());
                }
                return IDENTIFIER;
            }
          // fall through
          case 86: break;
          case 18:
            { return LEFT_BRACKET;
            }
          // fall through
          case 87: break;
          case 19:
            { return RIGHT_BRACKET;
            }
          // fall through
          case 88: break;
          case 20:
            { afterStorageType = false; return LEFT_BRACE;
            }
          // fall through
          case 89: break;
          case 21:
            { return RIGHT_BRACE;
            }
          // fall through
          case 90: break;
          case 22:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 91: break;
          case 23:
            { return COMPLETION_REQUEST;
            }
          // fall through
          case 92: break;
          case 24:
            { return MOD_ASSIGN;
            }
          // fall through
          case 93: break;
          case 25:
            { return AND_ASSIGN;
            }
          // fall through
          case 94: break;
          case 26:
            { return MUL_ASSIGN;
            }
          // fall through
          case 95: break;
          case 27:
            { return ADD_ASSIGN;
            }
          // fall through
          case 96: break;
          case 28:
            { return SUB_ASSIGN;
            }
          // fall through
          case 97: break;
          case 29:
            { return FLOAT_LITERAL;
            }
          // fall through
          case 98: break;
          case 30:
            { yybegin(MULTILINE_COMMAND_STATE); return MULTILINE_COMMENT;
            }
          // fall through
          case 99: break;
          case 31:
            { return LINE_COMMENT;
            }
          // fall through
          case 100: break;
          case 32:
            { return DIV_ASSIGN;
            }
          // fall through
          case 101: break;
          case 33:
            { return UINT_LITERAL;
            }
          // fall through
          case 102: break;
          case 34:
            { return SCOPE;
            }
          // fall through
          case 103: break;
          case 35:
            { return XOR_ASSIGN;
            }
          // fall through
          case 104: break;
          case 36:
            { return IN;
            }
          // fall through
          case 105: break;
          case 37:
            { return OR_ASSIGN;
            }
          // fall through
          case 106: break;
          case 38:
            { yybegin(YYINITIAL); return MULTILINE_COMMENT;
            }
          // fall through
          case 107: break;
          case 39:
            { return LEFT_SHIFT_ASSIGN;
            }
          // fall through
          case 108: break;
          case 40:
            { return RIGHT_SHIFT_ASSIGN;
            }
          // fall through
          case 109: break;
          case 41:
            { afterType = true; return INT32;
            }
          // fall through
          case 110: break;
          case 42:
            { return OUT;
            }
          // fall through
          case 111: break;
          case 43:
            { return DOUBLE_LITERAL;
            }
          // fall through
          case 112: break;
          case 44:
            { afterType = true; return BOOL;
            }
          // fall through
          case 113: break;
          case 45:
            { return EACH;
            }
          // fall through
          case 114: break;
          case 46:
            { afterStorageType = true; return ENUM;
            }
          // fall through
          case 115: break;
          case 47:
            { return FLAT;
            }
          // fall through
          case 116: break;
          case 48:
            { afterType = true; return HALF;
            }
          // fall through
          case 117: break;
          case 49:
            { return BOOL_LITERAL;
            }
          // fall through
          case 118: break;
          case 50:
            { afterType = true; return UINT32;
            }
          // fall through
          case 119: break;
          case 51:
            { afterType = true; return VOID;
            }
          // fall through
          case 120: break;
          case 52:
            { afterStorageType = true; return CLASS;
            }
          // fall through
          case 121: break;
          case 53:
            { return CONST;
            }
          // fall through
          case 122: break;
          case 54:
            { afterType = true; return FLOAT;
            }
          // fall through
          case 123: break;
          case 55:
            { return WHERE;
            }
          // fall through
          case 124: break;
          case 56:
            { afterType = true; return DOUBLE;
            }
          // fall through
          case 125: break;
          case 57:
            { return EXPAND;
            }
          // fall through
          case 126: break;
          case 58:
            { afterType = true; return INT8;
            }
          // fall through
          case 127: break;
          case 59:
            { afterStorageType = true; return STRUCT;
            }
          // fall through
          case 128: break;
          case 60:
            { afterType = true; return INT16;
            }
          // fall through
          case 129: break;
          case 61:
            { afterType = true; return INT64;
            }
          // fall through
          case 130: break;
          case 62:
            { return NO_DIFF;
            }
          // fall through
          case 131: break;
          case 63:
            { afterType = true; return UINT8;
            }
          // fall through
          case 132: break;
          case 64:
            { return FUNCTYPE;
            }
          // fall through
          case 133: break;
          case 65:
            { afterType = true; return UINT16;
            }
          // fall through
          case 134: break;
          case 66:
            { afterType = true; return UINT64;
            }
          // fall through
          case 135: break;
          case 67:
            { afterStorageType = true; return INTERFACE;
            }
          // fall through
          case 136: break;
          case 68:
            { afterStorageType = true; return NAMESPACE;
            }
          // fall through
          case 137: break;
          case 69:
            { return PRECISION;
            }
          // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
